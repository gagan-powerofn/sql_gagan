CREATE TABLE BOOK(
ID INT PRIMARY KEY,
NAME VARCHAR(255) NOT NULL,
ISBN BIGINT UNSIGNED,
EDITION INT);

LOAD DATA LOCAL INFILE '/home/gagan/book.csv' INTO TABLE BOOK FIELDS TERMINA
TED BY ',';

CREATE TABLE AUTHOR(
ID INT PRIMARY KEY,
FIRST_NAME VARCHAR(255) NOT NULL,
LAST_NAME VARCHAR(255) NOT NULL)

INSERT INTO AUTHOR VALUES
(1,'Hortsman','Cay S.'),
(2,'John Paul','Mueller'),
(3,'Mike','Chapple'),
(4,'Barbara','Walter')

INSERT INTO BOOK_DETAILS VALUES
(1,1), (2,1), (3,4), (4,4), (5,4), (6,2), (7,2), (8,3), (9,3), (10,2);

CREATE TABLE BOOK_REQUEST(
DUE_DATE DATE NOT NULL,
IS_ACTIVE ENUM('0','1') NOT NULL,
CUSTOMER_ID INT NOT NULL,
BOOK_ID INT PRIMARY KEY,
LIBRARIAN_ID BIGINT NOT NULL);

LOAD DATA LOCAL INFILE '/home/gagan/book_req.csv' INTO TABLE BOOK_REQUEST FIELDS TERMINATED BY ',';

CREATE TABLE CUST(
ID INT PRIMARY KEY,
NAME VARCHAR(255) NOT NULL,
ADDRESS VARCHAR(255) NOT NULL);

LOAD DATA LOCAL INFILE '/home/gagan/cust.csv' INTO TABLE CUST FIELDS TERMINATED BY ',';

CREATE TABLE LIBRARIAN(
ID INT PRIMARY KEY,
NAME VARCHAR(255));

INSERT INTO LIBRARIAN VALUES
(20211,'Julia Roosevelt'),
(20233,'Tom White');

--Question 1: Write an SQL query to display the book details with the respective author name.
SELECT BOOK.NAME AS BOOK_NAME, BOOK.ISBN, BOOK.EDITION, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME
FROM BOOK_DETAILS
JOIN AUTHOR
ON AUTHOR.ID=BOOK_DETAILS.AUTHOR_ID
JOIN BOOK
ON BOOK_DETAILS.BOOK_ID=BOOK.ID

--Question 2: Write an SQL query to find out the books with the word ‘programming’ in their names.
SELECT BOOK.NAME AS BOOK_NAME, BOOK_DETAILS.AUTHOR_ID, AUTHOR.FIRST_NAME AS AUTHOR_NAME
FROM BOOK_DETAILS
JOIN AUTHOR
ON AUTHOR.ID=BOOK_DETAILS.AUTHOR_ID
JOIN BOOK
ON BOOK_DETAILS.BOOK_ID=BOOK.ID
WHERE BOOK.NAME LIKE '%programming%'
ORDER BY BOOK.NAME;

--Question 3: Find the books that are not returned before the due date.
SELECT BOOK.NAME AS BOOK_NAME, BOOK_REQUEST.DUE_DATE, CUST.NAME AS CUSTOMER_NAME
FROM BOOK
JOIN BOOK_REQUEST
ON BOOK_REQUEST.BOOK_ID=BOOK.ID
JOIN CUST
ON CUST.ID=BOOK_REQUEST.CUSTOMER_ID
WHERE BOOK_REQUEST.IS_ACTIVE='0' AND CURRENT_DATE() > BOOK_REQUEST.DUE_DATE
ORDER BY BOOK.NAME;

--Question 4: Find all the unique entries in the book table.
SELECT DISTINCT NAME,ISBN,EDITION FROM BOOK;

--Question 5: Write an SQL query to display the book name, customer name and librarian name (first 50% of the records).
SELECT BOOK.NAME AS BOOK_NAME, CUST.NAME AS CUSTOMER_NAME, LIBRARIAN.NAME AS LIBRARIAN_NAME
FROM BOOK
JOIN BOOK_REQUEST
ON BOOK_REQUEST.BOOK_ID=BOOK.ID
JOIN CUST
ON CUST.ID=BOOK_REQUEST.CUSTOMER_ID
JOIN LIBRARIAN
ON LIBRARIAN.ID=BOOK_REQUEST.LIBRARIAN_ID
LIMIT 3;

--Question 6: Calculate the fine amount (Rs.1 per day if it exceeds the due date) for the books borrowed. Display the total fine amount for all the customers.
SELECT CUST.ID, CUST.NAME, SUM(IF(CUST.ID IN (SELECT BOOK_REQUEST.CUSTOMER_ID), (IF(BOOK_REQUEST.IS_ACTIVE='0', DATEDIFF(CURRENT_DATE(),BOOK_REQUEST.DUE_DATE),0)),0)) AS FINE_AMOUNT
FROM CUST
LEFT JOIN BOOK_REQUEST
ON CUST.ID=BOOK_REQUEST.CUSTOMER_ID
GROUP BY CUST.ID
ORDER BY CUST.ID;

--Question 7: Write an SQL query to display the librarian name and number of books they distributed to the customers.
SELECT LIBRARIAN.NAME, COUNT(*) 
FROM LIBRARIAN
JOIN BOOK_REQUEST
ON BOOK_REQUEST.LIBRARIAN_ID=LIBRARIAN.ID
GROUP BY LIBRARIAN.ID;

--Question 8: Find the customer who has borrowed multiple copies of the same book. 
SELECT C.NAME AS CUSTOMER_NAME,B.NAME AS BOOK_NAME,B.EDITION AS BOOK_EDITION,A.FIRST_NAME AS AUTHOR_FIRST_NAME 
FROM BOOK B 
JOIN BOOK_REQUEST R 
ON B.ID=R.BOOK_ID 
JOIN CUST C 
ON R.CUSTOMER_ID=C.ID 
JOIN BOOK_DETAILS D 
ON B.ID=D.BOOK_ID 
JOIN AUTHOR A 
ON D.AUTHOR_ID=A.ID 
GROUP BY CUSTOMER_NAME,BOOK_NAME 
HAVING COUNT(BOOK_NAME)>1;

--Question 9: Find the customers who haven’t borrowed any books from the library. Display the table as given below. 
SELECT CUST.ID, CUST.NAME, CUST.ADDRESS 
FROM CUST
WHERE CUST.ID NOT IN (SELECT CUSTOMER_ID FROM BOOK_REQUEST)
ORDER BY CUST.ID DESC;
